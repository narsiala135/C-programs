
     day 3 completed programs

21.program
#include<stdio.h>
void sort(int n,int*ptr){
	int i,j,t;
	for(i=0;i<n;i++){
		for(j=i+1;j<n;j++){
			if(*(ptr+j)<*(ptr+i)){
				t=*(ptr+i);
				*(ptr+i)=*(ptr+j);
				*(ptr+j)=t;
			}
		}
	}
	for(i=0;i<n;i++){
		printf("%d",*(ptr+i));
	}
}
int main(){
	int n=5;
	int arr[]={0,23,14,12,9};
	sort(n,arr);
	return 0;	
}


22.program:
#include<stdio.h>
void findfactorial(int num,int*fact);
int main(){
	int num,factorial;
	printf("enter a positive number:");
	scanf("%d",&num);
	findfactorial(num,&factorial);
	printf("factorial of %d is:%d\n",num,factorial);
	return 0;
}
void findfactorial(int num,int*fact){
	*fact=1;
	for(int i=1;i <= num;i++){
		*fact *= i;
	}
}


23.program:
#include<stdio.h>
#include<math.h>
int isprime(int num);
int main(){
	int num;
	printf("enter a positive integer:");
	scanf("%d",&num);
	if(isprime(num))
	printf("%d is a prime number.\n",num);
	else
	printf("%d is not a prime number.\n",num);
	return 0;
}
int isprime(int num){
	if(num<=1)
	  return 0;
	for(int i=2;i<=sqrt(num);++i){
		if(num%i==0)
		return 0;
	} 
	return 1; 
	
}


24.program:
#include<stdio.h>
#include<string.h>
void concatenatestring(char *dest,const char *src){
	while(*dest)
	dest++;
	while(*src){
		*dest=*src;
		dest++;
		src++;
	}
	*dest = '\0';
}
int main(){
	char str1[100],str2[100];
	printf("enter the first string:");
	gets(str1);
	printf("enter the second string:");
	gets(str2);
	concatenatestring(str1,str2);
	printf("concatenate string: %s\n,str1");
	return 0;
}

25.program:
#include <stdio.h>

void findSum(int *arr, int size, int *sum) {
    *sum = 0;
    for (int i = 0; i < size; i++) {
        *sum += *(arr + i);
    }
}

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = sizeof(arr) / sizeof(arr[0]);
    int sum;

    findSum(arr, size, &sum);

    printf("Sum of array elements: %d\n", sum);
    return 0;
}

26.program:
#include <stdio.h>

void deleteElement(int *arr, int *size, int pos) {
    if (pos < 0 || pos >= *size) {
        printf("Invalid position! Cannot delete element.\n");
        return;
    }

    for (int i = pos; i < *size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    (*size)--;
}

int main() {
    int arr[100];
    int size, pos;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the position of the element to delete (0-based index): ");
    scanf("%d", &pos);

    deleteElement(arr, &size, pos);

    printf("Array after deletion:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
27.program:
#include <stdio.h>

void reverseArray(int *arr, int size) {
    int *left = arr;
    int *right = arr + size - 1;

    while (left < right) {
        // Swap elements pointed by left and right
        int temp = *left;
        *left = *right;
        *right = temp;

        // Move pointers inward
        left++;
        right--;
    }
}

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    reverseArray(arr, size);

    printf("\nReversed array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}






